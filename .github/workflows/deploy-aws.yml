name: AWS Deployment

on:
  workflow_call:
    inputs:
      is_staging:
        description: Whether this deployment is on staging or production
        required: true
        type: boolean
      name:
        description: Name of the AWS ECS task / service
        required: true
        type: string
      cluster:
        description: Name of the AWS ECS cluster to deploy to
        required: true
        type: string
      url_production:
        description: URL where the production deployment can be visited
        required: false
        default: ""
        type: string
      url_staging:
        description: URL where the staging deployment can be visited
        required: false
        default: ""
        type: string
      digest:
        description: Docker image digest of the image to deploy (sha256:...)
        required: true
        type: string
      version:
        description: Version of the image
        required: true
        type: string

    secrets:
      AWS_ACCESS_KEY_ID:
        description: Your AWS access key
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: Your AWS secret key
        required: true
      AWS_REGION:
        description: The AWS region we are deploying in
        required: true

jobs:
  deploy:
    name: ${{ inputs.is_staging && 'Staging' || 'Production' }}
    runs-on: ubuntu-latest

    concurrency: deployment
    environment:
      name: ${{ inputs.is_staging && 'Staging' || 'Production' }}
      url: ${{ inputs.is_staging && inputs.url_staging || inputs.url_production || '' }}

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    - name: Download latest task definition
      run: |
        aws ecs describe-task-definition --task-definition ${{ inputs.is_staging && 'Staging' || 'Production' }}-${{ inputs.name }} --query taskDefinition > task-definition.json
    - name: Create new image name
      id: image
      run: |
        IMAGE_NAME=$(echo "ghcr.io/${{ github.repository }}" | tr [A-Z] [a-z])
        IMAGE=$(echo "${IMAGE_NAME}:${{ inputs.version }}@${{ inputs.digest }}")

        echo "Image: ${IMAGE}"
        echo "::set-output name=image::${IMAGE}"
    - name: Update task definition to new image name
      id: definition
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: Container
        image: ${{ steps.image.outputs.image }}
    - name: Deploy new task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.definition.outputs.task-definition }}
        service: ${{ inputs.is_staging && 'Staging' || 'Production' }}-${{ inputs.name }}
        cluster: ${{ inputs.cluster }}
        wait-for-service-stability: true
